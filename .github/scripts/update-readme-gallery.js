#!/usr/bin/env node

/**
 * Update README with Gallery Screenshots
 *
 * "Free your mind" - This script updates the README.md with a gallery section
 * showcasing all the shader variations.
 */

const fs = require("fs");
const path = require("path");

const galleryItems = [
	{ title: "Classic Matrix", filename: "classic-matrix.png" },
	{ title: "Matrix Resurrections", filename: "resurrections.png" },
	{ title: "3D Volumetric Mode", filename: "3d-volumetric.png" },
	{ title: "Operator Console", filename: "operator.png" },
	{ title: "Nightmare Matrix", filename: "nightmare.png" },
	{ title: "Paradise Matrix", filename: "paradise.png" },
	{ title: "Rainbow Spectrum", filename: "rainbow.png" },
	{ title: "Light Spectrum", filename: "spectrum.png" },
	{ title: "Custom Stripes (RGB)", filename: "stripes-rgb.png" },
	{ title: "Trinity Mode", filename: "trinity.png" },
	{ title: "Morpheus Mode", filename: "morpheus.png" },
	{ title: "Megacity", filename: "megacity.png" },
	{ title: "Palimpsest", filename: "palimpsest.png" },
	{ title: "Twilight", filename: "twilight.png" },
	{ title: "Debug View", filename: "debug.png" },
];

/**
 * Generate gallery markdown section for main README
 */
function generateGallerySection() {
	let markdown = "\n## ðŸŽ¨ Gallery\n\n";
	markdown += "_Explore the full range of Matrix shader variations:_\n\n";
	markdown += "**[View Live Gallery Slideshow](https://ap0ught.github.io/matrix/?effect=gallery)**\n\n";

	// Create a grid of screenshots (3 per row)
	const itemsPerRow = 3;
	for (let i = 0; i < galleryItems.length; i += itemsPerRow) {
		const rowItems = galleryItems.slice(i, i + itemsPerRow);

		// Images row
		markdown += "| ";
		rowItems.forEach((item) => {
			markdown += `![${item.title}](gallery/${item.filename}) | `;
		});
		markdown += "\n";

		// Separator row (only once)
		if (i === 0) {
			markdown += "| ";
			rowItems.forEach(() => {
				markdown += ":---: | ";
			});
			markdown += "\n";
		}

		// Titles row
		markdown += "| ";
		rowItems.forEach((item) => {
			markdown += `**${item.title}** | `;
		});
		markdown += "\n\n";
	}

	return markdown;
}

/**
 * Generate gallery/README.md content with links to all images
 */
function generateGalleryReadme() {
	let markdown = "# Matrix Shader Gallery\n\n";
	markdown += "This directory contains screenshots of all Matrix shader variations.\n\n";
	markdown += "Screenshots are automatically generated by the GitHub Actions workflow and can be regenerated on demand.\n\n";
	markdown += "## Gallery Images\n\n";
	markdown += "_Click on any image to view it in full size._\n\n";

	// Create a list of all images with links
	galleryItems.forEach((item) => {
		markdown += `### ${item.title}\n\n`;
		markdown += `![${item.title}](${item.filename})\n\n`;
		markdown += `[View full size](${item.filename})\n\n`;
	});

	return markdown;
}

/**
 * Main execution
 */
function main() {
	console.log("Updating README files with gallery...");

	// Update main README.md
	const readmePath = path.join(process.cwd(), "README.md");

	if (!fs.existsSync(readmePath)) {
		console.error("README.md not found!");
		process.exit(1);
	}

	let readme = fs.readFileSync(readmePath, "utf8");

	// Check if gallery section already exists
	const galleryMarkerStart = "## ðŸŽ¨ Gallery";
	const galleryMarkerEnd = "## Customization";

	const gallerySection = generateGallerySection();

	if (readme.includes(galleryMarkerStart)) {
		// Replace existing gallery section
		const startIndex = readme.indexOf(galleryMarkerStart);
		const endIndex = readme.indexOf(galleryMarkerEnd);

		if (endIndex > startIndex) {
			readme = readme.substring(0, startIndex) + gallerySection + readme.substring(endIndex);
		}
	} else {
		// Insert before "Customization" section
		const customizationIndex = readme.indexOf(galleryMarkerEnd);
		if (customizationIndex !== -1) {
			readme = readme.substring(0, customizationIndex) + gallerySection + readme.substring(customizationIndex);
		}
	}

	fs.writeFileSync(readmePath, readme, "utf8");
	console.log("âœ“ README.md updated with gallery section");

	// Update gallery/README.md
	const galleryReadmePath = path.join(process.cwd(), "gallery", "README.md");
	const galleryReadmeContent = generateGalleryReadme();

	fs.writeFileSync(galleryReadmePath, galleryReadmeContent, "utf8");
	console.log("âœ“ gallery/README.md updated with image links");
}

main();
